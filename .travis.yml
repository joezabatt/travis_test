# .travis.yml — Odoo 8 module tests on Ubuntu 16.04 (xenial)

dist: xenial                  # Ubuntu 16.04
language: python
python:
  - "2.7"

services:
  - postgresql

env:
  global:
    - ODOO_REPO=https://github.com/odoo/odoo.git
    - ODOO_BRANCH=8.0
    - ODOO_DIR=$HOME/odoo-8
    - DB_NAME=odoo_test
    - POSTGRES_ADMIN_USER=postgres
    - DB_USER=odoo_user
    - CUSTOM_ADDONS_DIR=/tmp/private-addons
    - GOOGLE_MAP_VIEW_REPO=github.com/zabatt/google_map_view.git
    - GOOGLE_MAP_VIEW_BRANCH=ratmil.torres_develop_10312_fix_dependency
    - GOOGLE_MAP_VIEW_MODULE=google_map_view
    - EMAIL_TO_FOLLOWER_REPO=github.com/zabatt/email_to_follower.git
    - EMAIL_TO_FOLLOWER_BRANCH=develop
    - EMAIL_TO_FOLLOWER_MODULE=email_to_follower
    - ZFORM_REPO=github.com/zabatt/zform.git
    - ZFORM_BRANCH=develop
    - ZFORM_MODULE=zform
    - FIELDSERVICE_REPO=github.com/zabatt/fieldservice.git
    - FIELDSERVICE_BRANCH=ratmil.torres_develop_10312_fieldservice-automatic-tests-on-git-push
    - FIELDSERVICE_MODULE=fieldservice



addons:
  apt:
    packages:
      - python-dateutil
      - python-docutils
      - python-feedparser
      - python-jinja2
      - python-ldap
      - python-libxslt1
      - python-lxml
      - python-mako
      - python-mock
      - python-openid
      - python-psycopg2
      - python-psutil
      - python-pybabel
      - python-pychart
      - python-pydot
      - python-pyparsing
      - python-reportlab
      - python-simplejson
      - python-tz
      - python-unittest2
      - python-vatnumber
      - python-vobject
      - python-webdav
      - python-werkzeug
      - python-xlwt
      - python-yaml
      - python-zsi
      - poppler-utils
      - python-pip
      - python-passlib
      - python-decorator
      - python-requests
      - gcc
      - python-dev
      - mc
      - bzr
      - python-setuptools
      - python-babel
      - python-feedparser
      - python-reportlab-accel
      - python-zsi
      - python-openssl
      - python-egenix-mxdatetime
      - python-jinja2
      - python-unittest2
      - python-mock
      - python-docutils
      - lptools
      - make
      - python-psutil
      - python-paramiko
      - poppler-utils
      - python-pdftools
      - antiword

before_install:
  # ... your existing setup ...
  - mkdir -p "$CUSTOM_ADDONS_DIR"
  - 'test -n "$GOOGLE_MAP_VIEW_MODULE" || (echo "ERROR: env var GOOGLE_MAP_VIEW_MODULE is not set" && exit 1)'
  - |
    if [ -n "$GH_TOKEN" ]; then
      echo "Cloning google_map_view module..."
      git clone "https://${GH_TOKEN}@${GOOGLE_MAP_VIEW_REPO}" \
        "$CUSTOM_ADDONS_DIR/$GOOGLE_MAP_VIEW_MODULE"
      if [ -n "$GOOGLE_MAP_VIEW_BRANCH" ]; then
        cd "$CUSTOM_ADDONS_DIR/$GOOGLE_MAP_VIEW_MODULE" && git checkout "$GOOGLE_MAP_VIEW_BRANCH" && cd -
      fi
    fi
  - |
    if [ -n "$GH_TOKEN" ]; then
      echo "Cloning email_to_follower module..."
      git clone "https://${GH_TOKEN}@${EMAIL_TO_FOLLOWER_REPO}" \
        "$CUSTOM_ADDONS_DIR/$EMAIL_TO_FOLLOWER_MODULE"
      if [ -n "$EMAIL_TO_FOLLOWER_BRANCH" ]; then
        cd "$CUSTOM_ADDONS_DIR/$EMAIL_TO_FOLLOWER_MODULE" && git checkout "$EMAIL_TO_FOLLOWER_BRANCH" && cd -
      fi
    fi
  - |
    if [ -n "$GH_TOKEN" ]; then
      echo "Cloning zform module..."
      git clone "https://${GH_TOKEN}@${ZFORM_REPO}" \
        "$CUSTOM_ADDONS_DIR/$ZFORM_MODULE"
      if [ -n "$ZFORM_BRANCH" ]; then
        cd "$CUSTOM_ADDONS_DIR/$ZFORM_MODULE" && git checkout "$ZFORM_BRANCH" && cd -
      fi
    fi
  - |
    if [ -n "$GH_TOKEN" ]; then
      echo "Cloning fieldservice module..."
      git clone "https://${GH_TOKEN}@${FIELDSERVICE_REPO}" \
        "$CUSTOM_ADDONS_DIR/$FIELDSERVICE_MODULE"
      if [ -n "$FIELDSERVICE_BRANCH" ]; then
        cd "$CUSTOM_ADDONS_DIR/$FIELDSERVICE_MODULE" && git checkout "$FIELDSERVICE_BRANCH" && cd -
      fi
    fi
  - 'test -n "$FIELDSERVICE_MODULE" || (echo "ERROR: env var FIELDSERVICE_MODULE is not set" && exit 1)'
  - sudo locale-gen en_US.UTF-8 || true
  - export LANG=en_US.UTF-8 LC_ALL=en_US.UTF-8

install:
  # Get Odoo 8
  - git clone --depth 1 --branch "$ODOO_BRANCH" "$ODOO_REPO" "$ODOO_DIR"
  # Use Odoo’s own requirements (plus your module’s, if present)
  - pip install --upgrade pip==20.3.4 setuptools==44.1.1 wheel==0.34.2
  - pip install -r "$ODOO_DIR/requirements.txt"
  # Useful test libs for older stacks
  - pip install psycopg2==2.7.7 mock==2.0.0 unittest2==1.1.0
  # Optional: your module’s extra deps
  - if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

before_script:
  # Prepare database
  - psql -U "$POSTGRES_ADMIN_USER" -c 'CREATE EXTENSION IF NOT EXISTS "uuid-ossp";' -d postgres || true
  - psql -U "$POSTGRES_ADMIN_USER" -c "CREATE USER $DB_USER SUPERUSER"
  - psql -U "$POSTGRES_ADMIN_USER" -c "CREATE DATABASE $DB_NAME"
  - psql -U "$POSTGRES_ADMIN_USER" -c "ALTER DATABASE $DB_NAME OWNER TO $DB_USER"
  # Sanity: show paths
  - echo "Odoo at $ODOO_DIR"
  - echo "Module $FIELDSERVICE_MODULE"
  - ls -la "$TRAVIS_BUILD_DIR"
  - echo "Travis dir $TRAVIS_BUILD_DIR"
  - cd "$TRAVIS_BUILD_DIR"
  - cd ..
  - pwd
  - ls
  - ls -la "$ODOO_DIR"

script:
  # Run tests for your module
  - >
    python "$ODOO_DIR/openerp-server"
    --db_user="$DB_USER"
    --db_host=localhost
    --db_port=5432
    --log-level=test
    --stop-after-init
    --test-enable
    --without-demo=all
    --addons-path="$CUSTOM_ADDONS_DIR,$ODOO_DIR/addons"
    -d "$DB_NAME"
    -i "$FIELDSERVICE_MODULE"

after_failure:
  # Helpful logs on failure
  - tail -n +1 ~/.local/share/Odoo/log/* 2>/dev/null || true

cache:
  pip: true

git:
  depth: 10

branches:
  only:
    - main
    - master
    - develop
